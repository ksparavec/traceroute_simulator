---
# Playbook to clean home directory contents only
- name: Clean trace user home directory contents
  hosts: all
  gather_facts: yes
  
  vars_files:
    - "{{ config_file | default('config/default.yml') }}"
  
  pre_tasks:
    - name: Validate required variables
      assert:
        that:
          - username is defined
          - username != ""
        fail_msg: |
          CRITICAL ERROR: Username must be provided via command line
          
          Usage: ansible-playbook -i "host," remove.yml -e "username=your_user"
        success_msg: "Username provided: {{ username }}"
      tags: [always]

    - name: Check if trace user exists
      getent:
        database: passwd
        key: "{{ restricted_user.name }}"
      register: user_exists
      failed_when: false
      changed_when: false
      tags: [user]

    - name: Fail if trace user does not exist
      fail:
        msg: |
          User '{{ restricted_user.name }}' does not exist on this system.
          Cannot clean home directory for non-existent user.
      when: not (user_exists.ansible_facts is defined and user_exists.ansible_facts.getent_passwd is defined and restricted_user.name in user_exists.ansible_facts.getent_passwd)
      tags: [user]

    - name: Get user home directory
      set_fact:
        actual_user_home: "{{ user_exists.ansible_facts.getent_passwd[restricted_user.name][4] }}"
      tags: [user]
    
  
  tasks:
    - name: Create backup before cleanup
      block:
        - name: Create backup directory
          file:
            path: "{{ backup.path | default('/root/ansible-backups/ssh-restricted') }}"
            state: directory
            mode: '0700'
          become: yes
            
        - name: Backup home directory contents
          archive:
            path: "{{ actual_user_home }}"
            dest: "{{ backup.path | default('/root/ansible-backups/ssh-restricted') }}/home-{{ restricted_user.name }}-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.tar.gz"
            format: gz
          ignore_errors: yes
          become: yes
          
        - name: Save cleanup record
          copy:
            content: |
              Cleanup Date: {{ ansible_date_time.iso8601 }}
              Cleaned By: {{ ansible_user_id }}
              Target Host: {{ inventory_hostname }}
              User: {{ restricted_user.name }}
              Home Directory Cleaned: {{ actual_user_home }}
              User Account: NOT REMOVED (still exists)
            dest: "{{ backup.path | default('/root/ansible-backups/ssh-restricted') }}/cleanup-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.log"
          become: yes
      when: backup.enabled | default(true)
      tags: [backup]
    
    - name: Clean home directory contents
      file:
        path: "{{ actual_user_home }}"
        state: absent
      become: yes
      tags: [cleanup]
    
    - name: Remove tracersh script
      file:
        path: "{{ tracersh.path }}"
        state: absent
      when: tracersh.enabled
      become: yes
      tags: [remove_tracersh]
    
    - name: Remove tracersh from /etc/shells
      lineinfile:
        path: /etc/shells
        line: "{{ tracersh.path }}"
        state: absent
      become: yes
      tags: [remove_tracersh]
    
    - name: Remove logrotate configuration
      file:
        path: "/etc/logrotate.d/tracersh-{{ restricted_user.name }}"
        state: absent
      when: tracersh.logging.enabled | default(false)
      become: yes
      tags: [remove_config]
    
    - name: Verify home directory is removed
      stat:
        path: "{{ actual_user_home }}"
      register: home_dir_check
      become: yes
      tags: [verify]
    
    - name: Display cleanup status
      debug:
        msg:
          - "======================================"
          - "Home Directory Cleanup Complete"
          - "======================================"
          - "Host: {{ inventory_hostname }}"
          - "User: {{ restricted_user.name }}"
          - "Home Directory: {{ actual_user_home }}"
          - "Home Directory Exists: {{ 'No' if not home_dir_check.stat.exists else 'Yes' }}"
          - "User Account: PRESERVED (not removed)"
          - "Backup Created: {{ 'Yes' if backup.enabled | default(true) else 'No' }}"
          - "======================================"
      tags: [always]