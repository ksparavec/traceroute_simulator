---
# Main deployment playbook for SSH restricted access
- name: Deploy SSH restricted access for traceroute
  hosts: all
  gather_facts: yes
  
  vars_files:
    - "config/default.yml"
  
  vars:
    # Debug: show which config file is being loaded
    debug_config_file: "{{ config_file | default('config/default.yml') }}"
  
  pre_tasks:
    - name: Validate required variables
      assert:
        that:
          - username is defined
          - username != ""
        fail_msg: |
          CRITICAL ERROR: Username must be provided via command line
          
          Usage: ansible-playbook -i "host," deploy.yml -e "username=your_user"
        success_msg: "Username provided: {{ username }}"
      tags: [always]

    - name: Check if trace user exists (CRITICAL - must exist before proceeding)
      getent:
        database: passwd
        key: "{{ restricted_user.name }}"
      register: user_exists
      failed_when: false
      changed_when: false
      tags: [user, critical]

    - name: FAIL IMMEDIATELY if trace user does not exist
      fail:
        msg: |
          CRITICAL ERROR: User '{{ restricted_user.name }}' does not exist on this system.
          
          This playbook requires the trace user to be pre-created before deployment.
          Please ensure the user account exists with appropriate permissions and try again.
          
          No further actions will be performed until this requirement is met.
      when: not (user_exists.ansible_facts is defined and user_exists.ansible_facts.getent_passwd is defined and restricted_user.name in user_exists.ansible_facts.getent_passwd)
      tags: [user, critical]

    - name: Check if configuration file exists
      stat:
        path: "{{ config_file | default('config/default.yml') }}"
      register: config_check
      delegate_to: localhost
      run_once: true

    - name: Fail if configuration file is missing
      fail:
        msg: |
          Configuration file not found: {{ config_file | default('config/default.yml') }}
          
          Please create your configuration file:
          1. Copy the example: cp config/default.yml.example config/default.yml
          2. Edit config/default.yml with your settings (especially the SSH public key)
          3. Run this playbook again
      when: not config_check.stat.exists
      delegate_to: localhost
      run_once: true


    - name: Determine public key file path
      set_fact:
        public_key_file_path: "{{ lookup('env', 'TSIM_CONFIG_PATH') | default('/opt/tsim/wsgi/conf/traceroute_simulator.yaml', true) }}"
      delegate_to: localhost
      run_once: true
      tags: [always]

    - name: Load traceroute simulator config for SSH key path
      slurp:
        src: "{{ public_key_file_path }}"
      register: tsim_config_content
      delegate_to: localhost
      run_once: true
      failed_when: false
      tags: [always]

    - name: Build complete ssh_config on localhost
      block:
        - name: Parse traceroute simulator config
          set_fact:
            tsim_config_parsed: "{{ tsim_config_content.content | b64decode | from_yaml }}"
          when: tsim_config_content.content is defined

        - name: Determine public key path from config
          set_fact:
            resolved_public_key_path: "{{ tsim_config_parsed.ssh.ssh_key }}.pub"
          when:
            - tsim_config_parsed is defined
            - tsim_config_parsed.ssh is defined
            - tsim_config_parsed.ssh.ssh_key is defined

        - name: Use default public key path if not in config
          set_fact:
            resolved_public_key_path: "/tmp/id_{{ restricted_user.name }}.pub"
          when: resolved_public_key_path is not defined

        - name: Read public key file
          slurp:
            src: "{{ resolved_public_key_path }}"
          register: public_key_content

        - name: Parse public key into components
          set_fact:
            parsed_public_key: "{{ (public_key_content.content | b64decode).strip().split() }}"

        - name: Build final ssh_config with all components
          set_fact:
            complete_ssh_config:
              restrict: "{{ ssh_config.restrict }}"
              from_hosts: "{{ ssh_config.from_hosts }}"
              pkey_file: "{{ resolved_public_key_path }}"
              key_type: "{{ parsed_public_key[0] }}"
              public_key: "{{ parsed_public_key[1] }}"
              key_comment: "{{ parsed_public_key[2] | default('tracersh') }}"

      delegate_to: localhost
      run_once: true
      tags: [always]


    - name: Check OpenSSH version for restrict support
      shell: ssh -V 2>&1 | grep -oE 'OpenSSH_[0-9]+\.[0-9]+' | cut -d_ -f2
      register: openssh_version
      changed_when: false
      tags: [always]

    - name: Set restrict support fact
      set_fact:
        supports_restrict: "{{ openssh_version.stdout is version('7.2', '>=') }}"
      tags: [always]


  roles:
    - role: ssh_restricted_access
      vars:
        ssh_config: "{{ hostvars['localhost']['complete_ssh_config'] }}"
      tags: [deploy]
  
  post_tasks:

