# Traceroute Simulator Configuration File
# 
# This file contains default configuration options for the traceroute simulator.
# Command line arguments take precedence over these settings.
#
# Configuration file location precedence:
# 1. Environment variable TRACEROUTE_SIMULATOR_CONF (if set)
# 2. ~/traceroute_simulator.yaml (user's home directory)
# 3. ./traceroute_simulator.yaml (current directory - this file)
#
# Option value precedence (highest to lowest):
# 1. Command line arguments
# 2. Configuration file values
# 3. Hard-coded defaults

# System configuration
system:
  # Unix group for file ownership and permissions
  # Members of this group can access simulator files and shared memory segments
  unix_group: tsim-users
  
  # File permissions (octal strings)
  file_permissions: "0664"  # rw-rw-r--
  directory_permissions: "0775"  # rwxrwxr-x

# Logging configuration
logging:
  # Base directory for log files (can be overridden by TRACEROUTE_SIMULATOR_LOGS)
  base_directory: /var/log/tsim
  
  # Log format: json or text
  format: json
  
  # Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
  # File logging level (logs everything at this level and above to file)
  file_level: DEBUG
  
  # Console logging level based on verbosity
  # Maps verbosity levels to log levels
  console_levels:
    0: CRITICAL  # -v0 or no -v: Only critical errors
    1: WARNING   # -v: Warnings and errors
    2: INFO      # -vv: Info, warnings, and errors  
    3: DEBUG     # -vvv: Everything including debug
  
  # Default log level (when no verbosity specified)
  default_level: 0
  
  # Batch command generator specific settings
  batch_generator:
    # Log file name pattern (supports strftime format)
    log_file_pattern: "batch_generator_%Y%m%d_%H%M%S.json"
    # Whether to log all command executions
    log_commands: true
    # Whether to log command outputs (stdout/stderr)
    log_outputs: true
    # Maximum output size to log per command (bytes)
    max_output_size: 10000
  
  # Log compression settings
  compress: false
  compression_format: xz
  compression_level: 9
  
  # Session log structure
  session_logs:
    network_setup: true
    host_operations: true
    service_manager: true

# Shared memory configuration
shared_memory:
  # Registry sizes in bytes
  registries:
    routers:
      size: 2097152     # 2MB
      persist: true
    interfaces:
      size: 4194304     # 4MB
      persist: true
    bridges:
      size: 2097152     # 2MB
      persist: true
    hosts:
      size: 1048576     # 1MB
      persist: true
  
  # Batch command segments
  batch_segments:
    # Maximum size for batch command segments
    max_size: 10485760  # 10MB
    # Cleanup policy: manual, on_exit, never
    cleanup_policy: manual

# Network setup configuration
network_setup:
  # Hidden infrastructure namespace
  hidden_namespace: tsim-hidden
  
  # Performance optimization
  batch_processing:
    enabled: true
    parallel_limit: 50  # Max parallel operations per batch

# Output configuration  
verbose: false                                  # Enable verbose output (-v flag)
verbose_level: 0                               # Verbosity level (0=critical only, 1=warnings, 2=info, 3=debug)
quiet: false                                   # Quiet mode (no output, exit codes only)
json_output: false                             # Output results in JSON format

# Tracing behavior
enable_mtr_fallback: true                      # Enable MTR fallback for incomplete paths
enable_reverse_trace: true                     # Enable reverse path tracing when forward fails

# Network discovery and execution environment
ansible_controller: false                      # Set to true if this code runs on the Ansible controller
controller_ip: "127.0.0.1"                     # Ansible controller IP (required when ansible_controller is false)

# SSH configuration for remote execution to routers
ssh:
  ssh_mode: user                               # Mode: 'user' or 'standard' (default: standard)
  ssh_user: traceuser                         # SSH username for user mode
  ssh_key: /opt/tsim/wsgi/conf/ssh_user.key   # SSH private key path for user mode
  ssh_options:                                # SSH options for router connections
    BatchMode: "yes"
    LogLevel: "ERROR"
    ConnectTimeout: 5
    StrictHostKeyChecking: "no"
    UserKnownHostsFile: "/dev/null"
    PasswordAuthentication: "no"

# SSH configuration for Ansible controller connections
ssh_controller:
  ssh_mode: user                               # Mode: 'user' or 'standard' (default: standard)
  ssh_user: traceuser                         # SSH username for user mode
  ssh_key: /opt/tsim/wsgi/conf/ssh_user.key   # SSH private key path for user mode
  ssh_options:                                # SSH options for controller connections
    BatchMode: "yes"
    LogLevel: "ERROR"
    ConnectTimeout: 10
    StrictHostKeyChecking: "yes"             # Validate host key for security
    UserKnownHostsFile: "~/.ssh/known_hosts" # Use standard known hosts file
    PasswordAuthentication: "no"

# Network status command configuration
network_status:
  # Cache configuration for performance
  cache:
    enabled: true
    backend: shared_memory  # Options: shared_memory, redis, sqlite
    base_path: /dev/shm/tsim/network_status_cache  # For shared_memory backend
    expiration_seconds: 3600  # 1 hour default
    max_size_mb: 100
    compression: false
    cleanup_interval: 7200  # Clean old entries every 2 hours
    
  # Parallel execution settings
  parallelization:
    enabled: true
    max_workers: 20  # Thread pool size
    timeout_per_namespace: 5  # Seconds per namespace query
    batch_size: 50  # Max namespaces per batch
    
  # Data collection control
  collection:
    interfaces: true
    routes: true
    rules: true
    iptables: true
    ipsets: true
    
  # Output formatting options
  formatting:
    translate_interface_names: true  # Convert v001 to original names
    show_original_names: true  # Display both short and original names
    json_indent: 2
    
  # Performance tuning
  performance:
    use_json_commands: true  # Use ip -j for JSON output where available
    cache_warmup: false  # Pre-populate cache on startup
    stale_cache_timeout: 300  # Return stale data if refresh takes too long

