---
# Main deployment playbook for SSH restricted access
- name: Deploy SSH restricted access for traceroute
  hosts: all
  gather_facts: yes
  
  vars_files:
    - "{{ config_file | default('config/default.yml') }}"
  
  pre_tasks:
    - name: Check if configuration file exists
      stat:
        path: "{{ config_file | default('config/default.yml') }}"
      register: config_check
      delegate_to: localhost
      run_once: true

    - name: Fail if configuration file is missing
      fail:
        msg: |
          Configuration file not found: {{ config_file | default('config/default.yml') }}
          
          Please create your configuration file:
          1. Copy the example: cp config/default.yml.example config/default.yml
          2. Edit config/default.yml with your settings (especially the SSH public key)
          3. Run this playbook again
      when: not config_check.stat.exists
      delegate_to: localhost
      run_once: true
    - name: Debug SSH configuration
      debug:
        msg:
          - "ssh_config.public_key is defined: {{ ssh_config.public_key is defined }}"
          - "ssh_config.public_key value: {{ ssh_config.public_key | default('NOT SET') }}"
          - "ssh_config.key_type: {{ ssh_config.key_type | default('NOT SET') }}"
          - "ssh_config.key_comment: {{ ssh_config.key_comment | default('NOT SET') }}"
      tags: [debug, always]
      when: ssh_config is defined

    - name: Validate configuration
      assert:
        that:
          - ssh_config is defined
          - ssh_config.public_key is defined
          - ssh_config.public_key != ""
          - ssh_config.public_key is string
          - restricted_user.name is defined
          - restricted_user.name != ""
        fail_msg: "SSH public key and user name must be configured. Ensure ssh_config.public_key contains the base64-encoded key data."
        success_msg: "Configuration validated successfully"
      tags: [always]
      
    - name: Check OpenSSH version for restrict support
      shell: ssh -V 2>&1 | grep -oE 'OpenSSH_[0-9]+\.[0-9]+' | cut -d_ -f2
      register: openssh_version
      changed_when: false
      tags: [always]
      
    - name: Set restrict support fact
      set_fact:
        supports_restrict: "{{ openssh_version.stdout is version('7.2', '>=') }}"
      tags: [always]
      
    - name: Display OpenSSH version information
      debug:
        msg: 
          - "OpenSSH version: {{ openssh_version.stdout }}"
          - "Supports 'restrict' option: {{ supports_restrict }}"
      tags: [always]
  
  roles:
    - role: ssh_restricted_access
      tags: [deploy]
  
  post_tasks:
    - name: Validate deployment
      include_tasks: roles/ssh_restricted_access/tasks/validate.yml
      tags: [validate]
      
    - name: Display deployment summary
      debug:
        msg:
          - "======================================"
          - "SSH Restricted Access Deployment Complete"
          - "======================================"
          - "User: {{ restricted_user.name }}"
          - "Home: {{ restricted_user.home }}"
          - "Command: {{ ssh_config.command }}"
          - "Allowed from: {{ ssh_config.from_hosts | join(', ') | default('anywhere', true) }}"
          - "Tracersh script: {{ 'enabled' if tracersh.enabled | default(true) else 'disabled' }}"
          - "======================================"
      tags: [always]
      
    - name: Save deployment record
      copy:
        content: |
          Deployment Date: {{ ansible_date_time.iso8601 }}
          Deployed By: {{ ansible_user_id }}
          Target Host: {{ inventory_hostname }}
          User Created: {{ restricted_user.name }}
          Configuration:
            - OpenSSH Version: {{ openssh_version.stdout | default('unknown') }}
            - Restrict Option: {{ 'enabled' if (supports_restrict | default(false)) else 'disabled (fallback to traditional)' }}
            - Command: {{ ssh_config.command }}
            - From Hosts: {{ ssh_config.from_hosts | join(', ') | default('any', true) }}
            - Wrapper Script: {{ 'enabled' if tracersh.enabled | default(true) else 'disabled' }}
        dest: "{{ backup.path | default('/var/backups/ansible/ssh-restricted') }}/deployment-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.log"
      when: backup.enabled | default(true)
      become: yes
      tags: [backup]

- name: Run basic connectivity test
  import_playbook: test.yml
  vars:
    run_quick_test: yes
  tags: [test]