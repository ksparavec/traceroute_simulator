---
# Main deployment playbook for SSH restricted access
- name: Deploy SSH restricted access for traceroute
  hosts: all
  gather_facts: yes
  
  vars_files:
    - "config/default.yml"
  
  vars:
    # Debug: show which config file is being loaded
    debug_config_file: "{{ config_file | default('config/default.yml') }}"
  
  pre_tasks:
    - name: Validate required variables
      assert:
        that:
          - username is defined
          - username != ""
        fail_msg: |
          CRITICAL ERROR: Username must be provided via command line
          
          Usage: ansible-playbook -i "host," deploy.yml -e "username=your_user"
        success_msg: "Username provided: {{ username }}"
      tags: [always]

    - name: Check if trace user exists (CRITICAL - must exist before proceeding)
      getent:
        database: passwd
        key: "{{ restricted_user.name }}"
      register: user_exists
      failed_when: false
      changed_when: false
      tags: [user, critical]

    - name: FAIL IMMEDIATELY if trace user does not exist
      fail:
        msg: |
          CRITICAL ERROR: User '{{ restricted_user.name }}' does not exist on this system.
          
          This playbook requires the trace user to be pre-created before deployment.
          Please ensure the user account exists with appropriate permissions and try again.
          
          No further actions will be performed until this requirement is met.
      when: not (user_exists.ansible_facts is defined and user_exists.ansible_facts.getent_passwd is defined and restricted_user.name in user_exists.ansible_facts.getent_passwd)
      tags: [user, critical]

    - name: Check if configuration file exists
      stat:
        path: "{{ config_file | default('config/default.yml') }}"
      register: config_check
      delegate_to: localhost
      run_once: true

    - name: Fail if configuration file is missing
      fail:
        msg: |
          Configuration file not found: {{ config_file | default('config/default.yml') }}
          
          Please create your configuration file:
          1. Copy the example: cp config/default.yml.example config/default.yml
          2. Edit config/default.yml with your settings (especially the SSH public key)
          3. Run this playbook again
      when: not config_check.stat.exists
      delegate_to: localhost
      run_once: true


    - name: Load traceroute simulator config for SSH key path
      slurp:
        src: "/opt/tsim/wsgi/conf/traceroute_simulator.yaml"
      register: tsim_config_content
      delegate_to: localhost
      run_once: true
      failed_when: false
      tags: [always]

    - name: Parse traceroute simulator config
      set_fact:
        tsim_config: "{{ (tsim_config_content.content | b64decode | from_yaml) if tsim_config_content.content is defined else {} }}"
      delegate_to: localhost
      run_once: true
      tags: [always]

    - name: Use SSH key path from traceroute simulator config
      set_fact:
        ssh_config: "{{ ssh_config | combine({
          'pkey_file': (tsim_config.ssh.ssh_key | regex_replace('\\.key$', '.pub'))
        }) }}"
      when: 
        - tsim_config.ssh is defined
        - tsim_config.ssh.ssh_key is defined
      delegate_to: localhost
      run_once: true
      tags: [always]

    - name: Check if public key file exists
      stat:
        path: "{{ ssh_config.pkey_file | default('/tmp/id_' + restricted_user_name + '.pub') }}"
      register: pkey_file_check
      delegate_to: localhost
      run_once: true

    - name: Generate SSH key pair if missing
      block:
        - name: Set key file paths
          set_fact:
            private_key_path: "{{ (ssh_config.pkey_file | default('/tmp/id_' + restricted_user_name + '.pub')) | regex_replace('\\.pub$', '') }}"
            public_key_path: "{{ ssh_config.pkey_file | default('/tmp/id_' + restricted_user_name + '.pub') }}"
          delegate_to: localhost
          run_once: true

        - name: Check if private key directory exists
          stat:
            path: "{{ private_key_path | dirname }}"
          register: key_dir_check
          delegate_to: localhost
          run_once: true

        - name: Fail if private key directory does not exist
          fail:
            msg: |
              CRITICAL ERROR: Directory for private key does not exist: {{ private_key_path | dirname }}
              
              Please ensure the directory exists before running this playbook.
              The playbook will not create missing directories for security reasons.
              
              Private key path: {{ private_key_path }}
              Public key path: {{ public_key_path }}
          when: not key_dir_check.stat.exists
          delegate_to: localhost
          run_once: true

        - name: Generate SSH key pair
          openssh_keypair:
            path: "{{ private_key_path }}"
            type: ed25519
            size: 256
            comment: "{{ restricted_user_name }}@{{ ansible_hostname }}"
            force: false
          delegate_to: localhost
          run_once: true
          become: yes

        - name: Determine web user name
          set_fact:
            web_user: "{{ 'apache' if (ansible_os_family == 'RedHat') else 'www-data' }}"
          delegate_to: localhost
          run_once: true

        - name: Set private key permissions
          file:
            path: "{{ private_key_path }}"
            mode: "0600"
            owner: "{{ web_user }}"
            group: "{{ tsim_config.system.unix_group | default('tsim-users') }}"
          delegate_to: localhost
          run_once: true
          become: yes

        - name: Set public key permissions
          file:
            path: "{{ public_key_path }}"
            mode: "0640"
            owner: "{{ web_user }}"
            group: "{{ tsim_config.system.unix_group | default('tsim-users') }}"
          delegate_to: localhost
          run_once: true
          become: yes

      when: not pkey_file_check.stat.exists
      delegate_to: localhost
      run_once: true
      tags: [ssh, keygen]

    - name: Read public key file
      slurp:
        src: "{{ ssh_config.pkey_file | default('/tmp/id_' + restricted_user_name + '.pub') }}"
      register: pkey_content
      delegate_to: localhost
      run_once: true

    - name: Parse public key components
      set_fact:
        parsed_key: "{{ (pkey_content.content | b64decode).strip().split() }}"
      delegate_to: localhost
      run_once: true

    - name: Extract key components
      set_fact:
        ssh_key_type: "{{ parsed_key[0] }}"
        ssh_key_data: "{{ parsed_key[1] }}"
        ssh_key_comment: "{{ parsed_key[2] | default('tracersh') }}"
      delegate_to: localhost
      run_once: true

    - name: Update ssh_config with parsed key data
      set_fact:
        ssh_config: "{{ ssh_config | combine({'key_type': ssh_key_type, 'public_key': ssh_key_data, 'key_comment': ssh_key_comment}) }}"
      delegate_to: localhost
      run_once: true


      
    - name: Check OpenSSH version for restrict support
      shell: ssh -V 2>&1 | grep -oE 'OpenSSH_[0-9]+\.[0-9]+' | cut -d_ -f2
      register: openssh_version
      changed_when: false
      tags: [always]
      
    - name: Set restrict support fact
      set_fact:
        supports_restrict: "{{ openssh_version.stdout is version('7.2', '>=') }}"
      tags: [always]
      
  
  roles:
    - role: ssh_restricted_access
      tags: [deploy]
  
  post_tasks:

