#!/usr/bin/env -S python3 -B -u
"""
Traceroute Simulator Shell (tsimsh)
Interactive command-line interface for traceroute simulator operations.
"""

import os
import sys
import argparse

# Try to detect if we're running from development directory or installed
script_dir = os.path.dirname(os.path.abspath(__file__))
src_dir = os.path.join(script_dir, 'src')

# Check if src directory exists (development mode)
if os.path.exists(src_dir):
    sys.path.insert(0, src_dir)
    # Development mode - we'll import from shell.tsim_shell
    is_installed = False
else:
    # Installed mode - we'll import from tsim.shell.tsim_shell
    is_installed = True

def main():
    """Main entry point for the shell."""
    # Parse command-line arguments
    import argparse as _argparse
    parser = argparse.ArgumentParser(
        description='Traceroute Simulator Shell',
        epilog='Examples:\n  tsimsh -V\n  tsimsh -q',
        formatter_class=_argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('-q', '--quick', action='store_true',
                        help='Quick startup: disable network status check and .tsimrc loading')
    parser.add_argument('-V', '--version', action='store_true',
                        help='Print version and exit')
    args = parser.parse_args()

    # Handle version early and exit
    if getattr(args, 'version', False):
        def _get_version():
            try:
                from tsim import __version__ as v
                return v
            except Exception:
                pass
            try:
                from src import __version__ as v
                return v
            except Exception:
                pass
            try:
                import importlib.metadata as md
                return md.version('tsim')
            except Exception:
                return 'unknown'
        print(f"tsimsh {_get_version()}")
        return 0

    # Clear sys.argv to prevent cmd2 from processing our arguments
    sys.argv = [sys.argv[0]]
    
    try:
        if is_installed:
            # Import from installed package
            from tsim.shell.tsim_shell import TracerouteSimulatorShell
            from tsim.shell.utils.script_processor import ScriptProcessor
        else:
            # Import from development directory
            from shell.tsim_shell import TracerouteSimulatorShell
            from shell.utils.script_processor import ScriptProcessor
        
        # Create shell instance with quick mode option
        shell = TracerouteSimulatorShell(quick_mode=args.quick)
        
        # Check if we're in batch mode (input or output is not a terminal)
        if not (sys.stdin.isatty() and sys.stdout.isatty()):
            # Read all input
            script_lines = sys.stdin.readlines()
            
            # Process script with control flow support
            processor = ScriptProcessor(shell.variable_manager, shell)
            exit_code = processor.process_script(script_lines)
            sys.exit(exit_code)
        else:
            # Interactive mode
            shell.cmdloop()
        
    except KeyboardInterrupt:
        print("\nGoodbye!")
        sys.exit(0)
    except ImportError as e:
        print(f"Error importing shell modules: {e}")
        print("Make sure all dependencies are installed: pip install cmd2 colorama tabulate pyyaml")
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
