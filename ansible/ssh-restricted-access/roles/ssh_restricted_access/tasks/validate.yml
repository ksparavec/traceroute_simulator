---
# Validation tasks for SSH restricted access deployment

- name: Validate user exists
  getent:
    database: passwd
    key: "{{ restricted_user_name }}"
  register: user_validation
  failed_when: false
  tags: [validate]

- name: Check user validation result
  assert:
    that:
      - user_validation.ansible_facts is defined
      - user_validation.ansible_facts.getent_passwd is defined
      - restricted_user_name in user_validation.ansible_facts.getent_passwd
    fail_msg: "User {{ restricted_user_name }} does not exist"
    success_msg: "User {{ restricted_user_name }} exists"
  tags: [validate]

- name: Validate SSH directory exists
  stat:
    path: "{{ restricted_user_home }}/.ssh"
  register: ssh_dir_validation
  become: yes
  tags: [validate]

- name: Check SSH directory validation
  assert:
    that:
      - ssh_dir_validation.stat.exists
      - ssh_dir_validation.stat.isdir
    fail_msg: "SSH directory does not exist or is not a directory"
    success_msg: "SSH directory exists with correct type"
  tags: [validate]

- name: Validate authorized_keys file
  stat:
    path: "{{ restricted_user_home }}/.ssh/authorized_keys"
  register: auth_keys_validation
  become: yes
  tags: [validate]

- name: Check authorized_keys validation
  assert:
    that:
      - auth_keys_validation.stat.exists
      - auth_keys_validation.stat.mode == security_authorized_keys_mode
      - auth_keys_validation.stat.pw_name == security_authorized_keys_owner
    fail_msg: "authorized_keys file missing or has incorrect permissions"
    success_msg: "authorized_keys file exists with correct permissions"
  tags: [validate]

- name: Validate authorized_keys content
  slurp:
    src: "{{ restricted_user_home }}/.ssh/authorized_keys"
  register: auth_keys_content
  become: yes
  tags: [validate]

- name: Check authorized_keys contains public key
  assert:
    that:
      - ssh_public_key in (auth_keys_content.content | b64decode)
    fail_msg: "Public key not found in authorized_keys"
    success_msg: "Public key correctly configured in authorized_keys"
  tags: [validate]

- name: Validate tracersh script
  when: tracersh_enabled
  block:
    - name: Set tracersh full path for validation
      set_fact:
        tracersh_full_path_validate: "/usr/local/bin/tracersh"
      tags: [validate, tracersh]

    - name: Check tracersh script exists
      stat:
        path: "{{ tracersh_full_path_validate }}"
      register: tracersh_validation
      become: yes
      tags: [validate, tracersh]
    
    - name: Validate tracersh script properties
      assert:
        that:
          - tracersh_validation.stat.exists
          - tracersh_validation.stat.mode == "0755"
          - tracersh_validation.stat.pw_name == "root"
          - tracersh_validation.stat.executable
        fail_msg: "Tracersh script missing or has incorrect permissions at {{ tracersh_full_path_validate }}"
        success_msg: "Tracersh script exists with correct permissions"
      tags: [validate, tracersh]
    
    - name: Test tracersh script syntax
      shell: bash -n {{ tracersh_full_path_validate }}
      changed_when: false
      tags: [validate, tracersh]

- name: Validate traceroute binary
  stat:
    path: "{{ tracersh_traceroute_path }}"
  register: traceroute_validation
  tags: [validate]

- name: Check traceroute binary
  assert:
    that:
      - traceroute_validation.stat.exists
      - traceroute_validation.stat.executable
    fail_msg: "Traceroute binary not found or not executable at {{ tracersh_traceroute_path }}"
    success_msg: "Traceroute binary found and executable"
  tags: [validate]

- name: Generate validation report
  set_fact:
    validation_report:
      user_exists: "{{ user_validation.ansible_facts is defined and user_validation.ansible_facts.getent_passwd is defined and restricted_user_name in user_validation.ansible_facts.getent_passwd }}"
      ssh_dir_exists: "{{ ssh_dir_validation.stat.exists }}"
      authorized_keys_exists: "{{ auth_keys_validation.stat.exists }}"
      authorized_keys_permissions: "{{ auth_keys_validation.stat.mode == security_authorized_keys_mode }}"
      public_key_configured: "{{ ssh_public_key in (auth_keys_content.content | b64decode) }}"
      tracersh_script_exists: "{{ tracersh_validation.stat.exists if tracersh_enabled else 'N/A' }}"
      tracersh_script_executable: "{{ tracersh_validation.stat.executable if tracersh_enabled else 'N/A' }}"
      traceroute_exists: "{{ traceroute_validation.stat.exists }}"
  tags: [validate, report]

- name: Display validation report
  debug:
    msg:
      - "======================================"
      - "Validation Report for {{ inventory_hostname }}"
      - "======================================"
      - "User exists: {{ validation_report.user_exists }}"
      - "SSH directory: {{ validation_report.ssh_dir_exists }}"
      - "Authorized keys: {{ validation_report.authorized_keys_exists }}"
      - "Correct permissions: {{ validation_report.authorized_keys_permissions }}"
      - "Public key configured: {{ validation_report.public_key_configured }}"
      - "Tracersh script: {{ validation_report.tracersh_script_exists }}"
      - "Tracersh executable: {{ validation_report.tracersh_script_executable }}"
      - "Traceroute binary: {{ validation_report.traceroute_exists }}"
      - "======================================"
      - "Overall status: {{ 'PASS' if validation_report.values() | select('equalto', false) | list | length == 0 else 'FAIL' }}"
      - "======================================"
  tags: [validate, report]

- name: Fail if validation failed
  fail:
    msg: "Validation failed. See report above for details."
  when: validation_report.values() | select('equalto', false) | list | length > 0
  tags: [validate]