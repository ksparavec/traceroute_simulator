---
# Ansible Playbook for collecting routing information from all Linux routers
# Each router is contacted to gather routing tables and policy rules as text output
# Text output is then converted to JSON on the Ansible controller using IP JSON wrapper

- name: Collect routing information from all routers
  hosts: all 
  gather_facts: no
  vars:
    output_dir: "routing_facts"
    temp_dir: "/tmp/routing_collection"
  tasks:
    - name: Create output directory on Ansible controller
      delegate_to: localhost
      file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'

    - name: Create temporary directory for text output on Ansible controller
      delegate_to: localhost
      file:
        path: "{{ temp_dir }}"
        state: directory
        mode: '0755'

    - name: Find ip command in standard paths
      shell: |
        for path in /sbin/ip /usr/sbin/ip /bin/ip /usr/bin/ip; do
          if [ -x "$path" ]; then
            echo "$path"
            exit 0
          fi
        done
        echo "ip command not found in standard paths" >&2
        exit 1
      register: ip_command_path
      failed_when: ip_command_path.rc != 0

    - name: Display found ip command path
      debug:
        msg: "Using ip command at: {{ ip_command_path.stdout }}"

    - name: Get routing tables as text output
      command: "{{ ip_command_path.stdout }} route show"
      register: ip_route_text
      failed_when: ip_route_text.rc != 0

    - name: Get policy rules as text output
      command: "{{ ip_command_path.stdout }} rule show"
      register: ip_rule_text
      failed_when: ip_rule_text.rc != 0

    - name: Save routing text output to temporary file
      copy:
        content: "{{ ip_route_text.stdout }}"
        dest: "{{ temp_dir }}/{{ inventory_hostname }}_route.txt"
      delegate_to: localhost

    - name: Save policy rules text output to temporary file
      copy:
        content: "{{ ip_rule_text.stdout }}"
        dest: "{{ temp_dir }}/{{ inventory_hostname }}_rule.txt"
      delegate_to: localhost

    - name: Convert routing text to JSON using wrapper
      shell: "python3 -c 'import sys; sys.path.insert(0, \"{{ playbook_dir }}\"); from ip_json_wrapper import IPCommandParser; import json; parser = IPCommandParser(); content = open(\"{{ temp_dir }}/{{ inventory_hostname }}_route.txt\").read(); print(json.dumps(parser.parse_route_output(content), indent=2))'"
      register: route_json_output
      delegate_to: localhost

    - name: Convert policy rules text to JSON using wrapper
      shell: "python3 -c 'import sys; sys.path.insert(0, \"{{ playbook_dir }}\"); from ip_json_wrapper import IPCommandParser; import json; parser = IPCommandParser(); content = open(\"{{ temp_dir }}/{{ inventory_hostname }}_rule.txt\").read(); print(json.dumps(parser.parse_rule_output(content), indent=2))'"
      register: rule_json_output
      delegate_to: localhost

    - name: Save routing tables JSON to file
      copy:
        content: "{{ route_json_output.stdout }}"
        dest: "{{ output_dir }}/{{ inventory_hostname }}_route.json"
      delegate_to: localhost

    - name: Save policy rules JSON to file
      copy:
        content: "{{ rule_json_output.stdout }}"
        dest: "{{ output_dir }}/{{ inventory_hostname }}_rule.json"
      delegate_to: localhost

    - name: Display collection summary
      debug:
        msg: 
          - "Successfully collected routing data from {{ inventory_hostname }}"
          - "Routing table lines: {{ ip_route_text.stdout_lines | length }}"
          - "Policy rule lines: {{ ip_rule_text.stdout_lines | length }}"

    - name: Clean up temporary text files
      file:
        path: "{{ temp_dir }}/{{ inventory_hostname }}_{{ item }}.txt"
        state: absent
      delegate_to: localhost
      loop:
        - route
        - rule

# Notes:
# - This playbook executes only basic 'ip' commands on remote hosts (no Python dependencies)
# - Automatically searches for 'ip' command in standard paths (/sbin, /usr/sbin, /bin, /usr/bin)
# - Uses full path to 'ip' command for maximum reliability across different Linux distributions
# - Text output is transferred to the Ansible controller for JSON conversion
# - Uses the IP JSON wrapper on the controller to convert text to JSON format
# - Requires Python 3 to be available only on the Ansible controller, not remote hosts
# - Set up inventory with target routers (can use groups, specific hosts, or patterns)
# - After the playbook run, all routing and rule information will be available as individual JSON files
#   in the specified output directory on the controller
# - The wrapper script provides identical JSON output to modern 'ip --json' commands
# - Temporary text files are automatically cleaned up after processing
