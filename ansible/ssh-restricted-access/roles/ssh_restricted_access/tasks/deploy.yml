---
# Deployment tasks for SSH restricted access

- name: Create backup directory if enabled
  file:
    path: "{{ backup_path }}"
    state: directory
    owner: root
    group: root
    mode: '0700'
  when: backup_enabled
  become: yes
  tags: [backup]


- name: Get user info
  getent:
    database: passwd
    key: "{{ restricted_user_name }}"
  register: user_info
  tags: [user]

- name: Set user home directory and group facts
  set_fact:
    actual_user_home: "{{ user_info.ansible_facts.getent_passwd[restricted_user_name][4] }}"
    user_primary_group: "{{ user_info.ansible_facts.getent_passwd[restricted_user_name][2] }}"
  tags: [user]

- name: Get group name from GID
  getent:
    database: group
    key: "{{ user_primary_group }}"
  register: group_info
  tags: [user]

- name: Set primary group name
  set_fact:
    user_primary_group_name: "{{ group_info.ansible_facts.getent_group.keys() | first }}"
  tags: [user]

- name: Add localhost network to SSH from_hosts for all hosts
  set_fact:
    effective_ssh_from_hosts: "{{ ssh_from_hosts + ['127.0.0.0/8'] }}"
  tags: [ssh]

- name: Ensure directory structure exists
  block:
    - name: Ensure user home directory exists
      file:
        path: "{{ actual_user_home }}"
        state: directory
        owner: "root"
        group: "{{ user_primary_group_name }}"
        mode: "{{ security_home_dir_mode }}"
      become: yes
      tags: [directories]
    
    - name: Create .ssh directory
      file:
        path: "{{ actual_user_home }}/.ssh"
        state: directory
        owner: "root"
        group: "{{ user_primary_group_name }}"
        mode: "{{ security_home_dir_mode }}"
      become: yes
      tags: [ssh, directories]
    
    - name: Ensure .ssh directory has correct permissions
      file:
        path: "{{ actual_user_home }}/.ssh"
        state: directory
        owner: "root"
        group: "{{ user_primary_group_name }}"
        mode: "{{ security_home_dir_mode }}"
        recurse: no
      become: yes
      tags: [ssh, directories, fix-permissions]
    
    
    - name: Create log directory if logging enabled
      file:
        path: "{{ actual_user_home }}/log"
        state: directory
        owner: "root"
        group: "{{ user_primary_group_name }}"
        mode: "{{ security_log_dir_mode | default('0750') }}"
      when:
        - tracersh_enabled
        - tracersh_logging_enabled
      become: yes
      tags: [tracersh, logging, directories]
  tags: [directories]

- name: Handle authorized_keys file
  block:
    - name: Check if authorized_keys exists
      stat:
        path: "{{ actual_user_home }}/.ssh/authorized_keys"
      register: existing_auth_keys
      become: yes
      tags: [ssh]
    
    - name: Read existing authorized_keys if present
      slurp:
        src: "{{ actual_user_home }}/.ssh/authorized_keys"
      register: auth_keys_content
      when: existing_auth_keys.stat.exists
      become: yes
      tags: [ssh]
    
    - name: Check if authorized_keys is managed by Ansible
      set_fact:
        auth_keys_ansible_managed: "{{ existing_auth_keys.stat.exists and (ansible_managed is defined and (ansible_managed.split('\n')[0] in (auth_keys_content.content | b64decode)) or ('Ansible' in (auth_keys_content.content | b64decode) and 'managed' in (auth_keys_content.content | b64decode))) }}"
      tags: [ssh]
    
    - name: Backup existing authorized_keys if needed
      copy:
        src: "{{ actual_user_home }}/.ssh/authorized_keys"
        dest: "{{ backup_path }}/authorized_keys.{{ inventory_hostname }}.{{ ansible_date_time.epoch }}.bak"
        remote_src: yes
        mode: '0600'
      when:
        - backup_enabled
        - existing_auth_keys.stat.exists
        - auth_keys_ansible_managed
      become: yes
      tags: [backup, ssh]
    
    - name: Configure authorized_keys
      template:
        src: authorized_keys.j2
        dest: "{{ actual_user_home }}/.ssh/authorized_keys"
        owner: "root"
        group: "{{ user_primary_group_name }}"
        mode: "{{ security_authorized_keys_mode }}"
      when: not existing_auth_keys.stat.exists or auth_keys_ansible_managed
      vars:
        user_home: "{{ actual_user_home }}"
      register: auth_keys_deployed
      become: yes
      tags: [ssh]
    
    - name: Ensure authorized_keys has correct permissions
      file:
        path: "{{ actual_user_home }}/.ssh/authorized_keys"
        state: file
        owner: "root"
        group: "{{ user_primary_group_name }}"
        mode: "{{ security_authorized_keys_mode }}"
      become: yes
      tags: [ssh, fix-permissions]
    
  tags: [ssh]

- name: Install tracersh script
  when: tracersh_enabled
  block:
    - name: Set tracersh script paths
      set_fact:
        # Use path from config
        tracersh_full_path: "{{ tracersh_path }}"
        tracersh_log_full_path: "{{ tracersh_logging_path }}"
      tags: [tracersh]
    
    - name: Check if tracersh script exists
      stat:
        path: "{{ tracersh_full_path }}"
      register: existing_tracersh
      become: yes
      tags: [tracersh]
    
    - name: Read existing tracersh script if present
      slurp:
        src: "{{ tracersh_full_path }}"
      register: tracersh_content
      when: existing_tracersh.stat.exists
      become: yes
      tags: [tracersh]
    
    - name: Check if tracersh script is managed by Ansible
      set_fact:
        tracersh_ansible_managed: "{{ existing_tracersh.stat.exists and (ansible_managed is defined and (ansible_managed.split('\n')[0] in (tracersh_content.content | b64decode)) or ('Ansible' in (tracersh_content.content | b64decode) and 'managed' in (tracersh_content.content | b64decode))) }}"
      tags: [tracersh]
    
    
    - name: Create bin directory for tracersh script
      file:
        path: "{{ tracersh_full_path | dirname }}"
        state: directory
        owner: "root"
        group: "{{ user_primary_group_name }}"
        mode: "{{ security_ssh_dir_mode }}"
      become: yes
      tags: [tracersh, directories]
    
    - name: Deploy tracersh script
      template:
        src: tracersh.j2
        dest: "{{ tracersh_full_path }}"
        owner: root
        group: "{{ user_primary_group_name }}"
        mode: "{{ security_tracersh_mode }}"
      when: not existing_tracersh.stat.exists or tracersh_ansible_managed
      vars:
        user_home: "{{ actual_user_home }}"
      become: yes
      tags: [tracersh]
    
    - name: Add tracersh to /etc/shells
      lineinfile:
        path: /etc/shells
        line: "{{ tracersh_full_path }}"
        state: present
      become: yes
      tags: [tracersh, shell]
    
    
    - name: Configure log rotation if logging enabled
      copy:
        content: |
          {{ tracersh_log_full_path }} {
              weekly
              rotate {{ tracersh.logging.rotate | default(7) }}
              maxsize {{ tracersh.logging.max_size | default('10M') }}
              compress
              delaycompress
              missingok
              notifempty
              create 0664 root {{ user_primary_group_name }}
          }
        dest: "/etc/logrotate.d/tracersh-{{ restricted_user_name }}"
        owner: root
        group: root
        mode: '0644'
      when: tracersh_logging_enabled
      become: yes
      tags: [tracersh, logging]
  tags: [tracersh]

- name: Create deployment summary
  set_fact:
    deployment_summary:
      user: "{{ restricted_user_name }}"
      user_management: "centrally managed"
      home: "{{ actual_user_home }}"
      ssh_key_configured: "{{ 'yes' if (not existing_auth_keys.stat.exists or auth_keys_ansible_managed) else 'skipped (not ansible managed)' }}"
      tracersh: "{{ 'enabled' if tracersh_enabled else 'disabled' }}"
      tracersh_location: "{{ tracersh_full_path | default('N/A') }}"
      preferred_tool: "{{ tracersh_preferred_tool }}"
      available_tools: "traceroute and/or mtr (as available)"
      restrict_option: "{{ 'enabled' if (supports_restrict | default(false)) and ssh_restrict_option else 'disabled' }}"
      from_restrictions: "{{ ssh_from_hosts | length > 0 }}"
      logging: "{{ 'enabled' if tracersh_logging_enabled else 'disabled' }}"
      target_validation: "10.x.x.x addresses only (ICMP mode)"
      output_format: "Canonical CSV (hop,ip,rtt,loss)"
  tags: [summary]

- name: Display deployment summary
  debug:
    var: deployment_summary
  tags: [summary]
